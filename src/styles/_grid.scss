@import './mixins';

.grid-container-fluid,
.grid-container,
.cmp-container {
    margin-right: auto;
    margin-left: auto;
    width: 100%;

    @include respond-from('md') {
        max-width: $desktop-container + px;
    }

    @include respond-from('lg') {
        max-width: $wide-desktop-container + px;
    }

    & .cmp-row {
        margin: 48px 0;
    }
}

.grid-row {
    display: flex;
    -webkit-box-flex: 0;
    -ms-flex: 0 1 auto;
    flex: 0 1 auto;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    width: 100%;

    &--no-gutters {
        & > [class^='col-'] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

.grid-row.reverse {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
}

.col.reverse {
    -webkit-box-orient: vertical;
    -webkit-box-direction: reverse;
    -ms-flex-direction: column-reverse;
    flex-direction: column-reverse;
}

// iterate over each breakpoint and call mixin to generate grid and alignment classes
@each $breakpoint in map-keys($grid-breakpoints) {
    @include respond-from($breakpoint) {
        // gutter size is calculated in percentage of max width of breakpoint as per requirements
        $gutter_size: percentage(calc(
            map-get($grid-gutter-size, $breakpoint) /
                (
                    map-get($grid-max-size, $breakpoint) - map-get($grid-margin-size, $breakpoint) +
                        map-get($grid-gutter-size, $breakpoint)
                )
        ));
        @include grid-generator($breakpoint, map-get($grid-column-count, $breakpoint), $gutter_size);
        @include alignment-generator($breakpoint);
        // classes added for all breakpoints to be re-used in show/hide logic across breakpoints

        /* stylelint-disable declaration-no-important */
        .#{$breakpoint}-none {
            display: none !important;
        }
        .#{$breakpoint}-block {
            display: block !important;
        }
        .#{$breakpoint}-inline {
            display: inline !important;
        }
        .#{$breakpoint}-flex {
            display: flex !important;
        }
        .#{$breakpoint}-row-reverse {
            -webkit-box-orient: horizontal;
            -webkit-box-direction: reverse;
            -ms-flex-direction: row-reverse;
            flex-direction: row-reverse;
        }
        .#{$breakpoint}-inline-block {
            display: inline-block !important;
        }

        .#{$breakpoint}-col-row {
            -webkit-box-orient: vertical;
            -webkit-box-direction: normal;
            -ms-flex-direction: column;
            flex-direction: column;
        }

        .#{$breakpoint}-row {
            -webkit-box-orient: horizontal;
            -webkit-box-direction: normal;
            -ms-flex-direction: row;
            flex-direction: row;
        }

        .#{$breakpoint}-justify-center {
            justify-content: center !important;
        }

        .#{$breakpoint}-justify-start {
            justify-content: start !important;
        }

        .#{$breakpoint}-justify-space-between {
            justify-content: space-between !important;
        }
    }
}
